
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package quinemccluskey.qmcv2;
import java.util.*;
import java.io.*;
import java.lang.*;

///las minusculas son las negadas

public class QuineMcCluskey {

    //representan un arreglo de ceros y unos de los minterminos y dontcare
    //ingresados al principio del programa
    static String[] minterminos = new String[200];
    static String[] dontcares = new String[200];

      //maxbitsdontcare representa los dontcare en binario con el maximo numero 
        //de bits disponible dado por la variable maxbits
    
    static String[] maxbitsdontcare = new String[200];
    static int maxbits = 0;
    
    static String[][] calculadorprimos = new String[100][100];

///guarda a los minterminos despues de haber comparado su adyasencia es por 
    //eso que tiene una rayita simbolizando la busqueda  y el ecnuentro de la adyacenncia 
    //y la simplicacion de dos terminos en comun con un bit 
    static String[] m_terminos = new String[200];
    static int inicesubmin = 0;

 
    //variable para checar si un proceso se ha llevado a cabo
    static char banderin = 'F';
    static char primerprimoband = 'T';
    static char bandeparar='F';

 


 

    public static void main(String[] args) 
    {
        QuineMcCluskey QMC = new QuineMcCluskey();
        QMC.iniciarMetodo();
    }

    public void iniciarMetodo()
    {
        Scanner s = new Scanner(System.in);
        char siono;
        
        //arreglos que guardan los minterminos y dontcare introducidos por el usuario
        //en recogerminterminos y recogerdontcare
        int[] minint = new int[200];
        int[] dcint = new int[200];
        minint = inicializararrayint(minint);
        dcint = inicializararrayint(dcint);
        
        //mientras la bandera de parar valga F o falso se continuara con 
        //el proceso de preguntar al usuario 
        //el proceso para al obtener el maximo de bits de todos los minterminos
        //introducidos ya que se llega a esa funcion cuando el usuario introdujo todo correctamente
        //bandeparar se volvera C o correcto 
        
       while(bandeparar=='F')
       {
        
           System.out.println("Hola introduce los minterminos separados por 'enter' y teclea -1 cuando hayas acabado");
            minint = recogerminterminos();

        
            System.out.println("Hay condiciones dont care? Si si oprimir s o S sino oprimir cualquier tecla");
            siono = s.next().charAt(0);
            if (siono == 's' || siono == 'S') 
            {
            System.out.println("Introduce los dont care separados por 'enter' y teclea -1 cuando hayas acabado");
            dcint = recogerdontcare();
     
            
            } 

            maxbits = obtenermaximodebits(minint);
       }
       
       System.out.println("--- minterminos convertidos a binario ---\n");
        minterminos = obtenerarreglobinariostr(minint);
       System.out.println("--- dontcare convertidos a binario ---\n");
        dontcares = obtenerarreglobinariostr(dcint);

        terminarmetodo();
    }
    

    //pregunta al usuario los minterminos, los imprime y los devuelve en forma de matriz de enteros
    public static int[] recogerminterminos() 
    {
        int  indt = 0;
        
        int[] temporal = new int[200];
        temporal = inicializararrayint(temporal);
        
        Scanner scan = new Scanner(System.in);
        int minusuario;
        
        while ((minusuario = scan.nextInt()) != -1) 
        {
            temporal[indt] = minusuario;
            indt++;
        }

		System.out.println("--- Minterminos registrados ---\n");
		for( int i=0; i < temporal.length; i++ ) {
			if( temporal[i] != -1 )
				System.out.println("Mintermino "+i+ ": "+ temporal[i] );
		}
		System.out.println("\n------");

		return temporal;
    }
    
      public static int[] recogerdontcare() 
      {
        int indice= 0;
        Scanner scan = new Scanner(System.in);

        int[] arrayt = new int[200];
        arrayt = inicializararrayint(arrayt);
      

        int minusuario;
        
        while ((minusuario = scan.nextInt()) != -1) 
        {
            arrayt[indice] = minusuario;
            indice++;
        }

		System.out.println("--- Minterminos Dontcare registrados ---\n");
		for( int i=0; i < arrayt.length; i++ ) {
			if( arrayt[i] != -1 )
				System.out.println("dontcare "+i+ ": "+ arrayt[i] );
		}
		System.out.println("\n------");

		return arrayt;
    }
      
      //este metodo revisa todos los terminos para saber cual es el maximo numero
      //de bits a manejar en nuestro arreglo de minterminos binarios
      //con este metodo se decide el numero maximo de variables en este caso
      //tiene un maximo de 10 variables 
    public static int obtenermaximodebits(int[] minenteros) 
    {
        //f de falso t c ee correcto, falso que no se para y correcto que se pare el proceso
        int minmax = 0;
        int indiceint = 0;
        int bitmaximo = 0;
        
       //este while busca al mintermino mas grande introducido
        while (minenteros[indiceint] != -1)
        {
            if (minenteros[indiceint] > minmax) 
            {
                minmax = minenteros[indiceint];
            }
            indiceint++;
        }
        
        if (minmax == 1|| minmax==0)
        {
            bitmaximo = 1;
            bandeparar='C';
        } else if (minmax > 1 && minmax < 4) 
        {
            bitmaximo = 2;
            bandeparar='C';
        } else if (minmax >= 4 && minmax < 8) 
        {
            bitmaximo = 3;
            bandeparar='C';
        } else if (minmax >= 8 && minmax < 16) 
        {
            bitmaximo = 4;
            bandeparar='C';
        } else if (minmax >= 16 && minmax < 32) 
        {
            bitmaximo = 5;
            bandeparar='C';
        } else if (minmax >= 32 && minmax < 64) 
        {
            bitmaximo = 6;
            bandeparar='C';
        } else if (minmax >= 65 && minmax <128)
        {
            bitmaximo = 7;
            bandeparar='C';
        } else if(minmax >=128 && minmax<256)
        {
            bitmaximo=8;
            bandeparar='C';
        } else if(minmax>=256 && minmax<512)
        {
            bitmaximo=9;
            bandeparar='C';
        }
        else if (minmax>=512 && minmax<1024)
        {
            bitmaximo=10;
            bandeparar='C';
        }
    
        else {
            System.out.println("Solo se aceptan minterminos menores a 1024");
            bandeparar = 'F';
        }
        return bitmaximo;
    }
    
    //metodo que crea una matriz string binaria a partir del array de minterminos enteros

    public static String[] obtenerarreglobinariostr(int[] intarray) 
    {
        int indice = 0;
        String minbinariostring[] = new String[200];
        minbinariostring = inicializararraystr(minbinariostring);

        //aqui se hace toda la  conversion de int a binario y a string...
        while (intarray[indice] != -1) 
        {
            minbinariostring[indice] = convertirintbitstr(intarray[indice]);
            indice++;
        }
		
		for( int i=0; i < minbinariostring.length; i++ ) {
			if( !minbinariostring[i].equals("-1") )
				System.out.println( minbinariostring[i] );
		}
		System.out.println("\n------");

        return minbinariostring;
    }

    public static void terminarmetodo() 
    {
        int nomin = 0;
        int indicedc = 0;
        
        //variable parecida a maxbitsdontcare peero minterminos en especifico
        String[][] matrizdeady = new String[100][100];
        
        //matriz de respaldo de los minterminos
        String[][] minsrespaldo = new String[100][100];
        minsrespaldo = inicializarmatriz(minsrespaldo);

        matrizdeady = inicializarmatriz(matrizdeady);         

        //llenando la matriz con arreglos de -1
	calculadorprimos = inicializarmatriz(calculadorprimos);
        maxbitsdontcare = inicializararraystr(maxbitsdontcare);
        
        //llena el arreglo con -1 una forma de inicializarlo
        m_terminos = inicializararraystr(m_terminos);
        
        
        //se define el numero de minterminos 
        while (minterminos[nomin] != "-1") 
        {
            nomin++;
        }

        // se aÃ±aden los dontcare al arreglo de minterminos
        while (dontcares[indicedc] != "-1") 
        {
            minterminos[nomin] = dontcares[indicedc];
            nomin++;
            indicedc++;
        }

    
   
        indicedc = 0;
        
        // este metodo llena los ceros faltantes en cada mintermino binario
        // y acomoda a los minterminos en un array segun su numero de unos
        matrizdeady = definirarraydeminter(minterminos);
        
        //llenando calculadorprimos con los minterminos con su maximo de bits y ordenados
        //por su numero de unos en comun


       for (int i = 0; i < matrizdeady.length; i++) 
       {
            for (int j = 0; j < matrizdeady[i].length; j++)
            {
                if (matrizdeady[i][j] != "-1") 
                {
                    calculadorprimos[indicedc][0] = matrizdeady[i][j];
                    indicedc++;
                }
            }
        }

		
       //esta funcion rellena los terminos dontcare que les falte ceros 
       
        maxbitsdontcare = rellenardontcares(dontcares);

        //ciclo recursivo que sigue comparando adyascencia hasta que 
        while(banderin != 'T')
        {
            matrizdeady=compararadyasencia(matrizdeady);
        }
        
        quitarprimosdobles();
   
        
        minsrespaldo = obtenerprimosescenciales();
        if (minsrespaldo[0][0] != "-1") 
        {
            minsrespaldo = obtenerprimos(minsrespaldo);
        }
        
        nomin=0;indicedc=0;
        
        //mientras la variable calculadorprimos que es igual a final pass solo que no tiene
        //columnas o solo tiene muchos arreglos con un solo termino en cada uno (final pass contien
        //e los los minerminos en binario con su numero maximo de bits 
        //no sea -1 o D y Y
        
        while(calculadorprimos[nomin][0]!="-1" && calculadorprimos[nomin][0] != "D" && calculadorprimos[nomin][0] != "Y")
        {
            //los subminters representan los minterminos que salen despues de haber 
            //comparado la adyasencia 
            m_terminos[inicesubmin]=calculadorprimos[nomin][0];
            inicesubmin++;
            nomin++;
        }

        obtenerfuncionbooleana(m_terminos);
    }
    
    
 //Este metodo crea un array de arrays donde los terminos de cada 
    //array tienen en comun el mismo numero de unos ademas se llena a
    //los minterminos con el numero maximo de bits definido por maxbits
    
    public static String[][] definirarraydeminter(String[] minbinstr) 
    {
        String depaso;
        int indie = 0;
        int unos;
        int ones = 0, twos = 0, threes = 0, fours = 0, fives=0, sixes=0, sevens=0,eights=0,nines=0,tens=0,elevens=0,twelves=0,thirteens=0;
        String[][] matrzminadyacentes = new String[100][100];
        
        //esta funcion llena al array de otros arrays llenos todos de -1
        inicializarmatriz(matrzminadyacentes);

        while (minbinstr[indie] != "-1")
        {

            unos = 0;
            depaso = minbinstr[indie];


            while (depaso.length() < maxbits) {
                depaso = "0" + depaso;
            }


            for (int i = 0; i < depaso.length(); i++) 
            {
                if (depaso.charAt(i) == '1') {
                    unos++;
                }
            }

            switch(unos)
            {
                case 0:
                    matrzminadyacentes[0][0] = depaso;
                    break;
                case 1: 
                    
                    matrzminadyacentes[1][ones] = depaso;
                    ones++;
                    
                    break;
                    
                case 2:
                    
                    matrzminadyacentes[2][twos] = depaso;
                    twos++;
                
                    break;
                case 3:
                    
                      matrzminadyacentes[3][threes] = depaso;
                      threes++;
                      
                    break;
                    
                case 4:
                    
                     matrzminadyacentes[4][fours] = depaso;
                     fours++;
                    
                    break;
                case 5:
                    
                    matrzminadyacentes[5][fives] = depaso;
                    fives++;
                    
                    break;
                case 6:
                    
                    matrzminadyacentes[6][sixes] = depaso;
                    sixes++;
                    
                    break;
                case 7:
                    
                      matrzminadyacentes[7][sevens] = depaso;
                      sevens++;
                    
                    break;
                case 8: 
                    
                    matrzminadyacentes[8][eights] = depaso;
                    eights++;
                
                    break;
                case 9:
                    
                      matrzminadyacentes[9][nines] = depaso;
                      nines++;
                      
                    break;
                case 10: 
                    matrzminadyacentes[10][tens] = depaso;
                    tens++;
                    
                    break;
                    
                    
                default:
                    break;
                            
            }
         
           indie++;
           
        }
     
		System.out.println("--- Matriz acomodada segun el numero de unos de los minterminos---");
		for( int i=0; i < matrzminadyacentes.length; i++ ) {
			boolean hayValor = false;
			for( int j=0; j < matrzminadyacentes[i].length; j++ ) 
                        {
				if( !matrzminadyacentes[i][j].equals( "-1" ) ) 
                                {
					System.out.print( matrzminadyacentes[i][j] + " ");
					hayValor = true;
				}
			}
			if( hayValor )
				System.out.println("\n------");
		}

        return matrzminadyacentes;
    }

    //esta funcion rellena los terminos dontcare que les falte ceros 
    public static String[] rellenardontcares (String[] arrminsbins) 
    {
        String[] arreglodontcare = new String[200];
        arreglodontcare = inicializararraystr(arreglodontcare);
        String bitstr;
        int a = 0;
     
        int b = 0;

        //llenando el arreglo a partir de otro arreglo pero con el maximo de bits considerarlo
        while (arrminsbins[a] != "-1") 
        {
         
            bitstr = arrminsbins[a];

            while (bitstr.length() < maxbits) 
            {
                bitstr = "0" + bitstr;
            }

            arreglodontcare[b] = bitstr;
            b++;
            a++;
        }

       

        return arreglodontcare;
    }

    
    //metodo que ve si un mintermino difiere con otro de otro array en un solo digito
    public static String[][] compararadyasencia(String[][] matrzminadyacentes) 
    {
        String[][] nuevamatrizminadyacentes = new String[100][100];
        int novecinas = 0;
        int c=0;
        int indice = 0;
        int min_comp = 0, min_comp2 = 1, min_comp1 = 0, min_comp3 = 0;
        int index1 = 0, index2 = 0;



//inicializando matriz de string....
        for (int i = 0; i < 100; i++) 
        {
            for (int j = 0; j < 100; j++) 
            {
                nuevamatrizminadyacentes[i][j] = "-1";
            }
        }
        
        //recogiendo el numero de arreglos que conforman a ,a matriz del parametro
       while (c<matrzminadyacentes.length) 
       {
        if(matrzminadyacentes[c][0]!="-1" && matrzminadyacentes[c+1][0] != "-1")
            novecinas++;
         c++;
       }
       
        
        
        

        if(novecinas >=1)
        {
             novecinas=0;
            while (min_comp < matrzminadyacentes.length - 1)
            {


                while (matrzminadyacentes[min_comp][min_comp1] != "-1") 
                {

                     while (matrzminadyacentes[min_comp2][min_comp3] != "-1") 
                     {



                         for (int ij = 0; ij < maxbits; ij++) 
                         {

                            if (matrzminadyacentes[min_comp][min_comp1].charAt(ij) != matrzminadyacentes[min_comp2][min_comp3].charAt(ij)) {
                            novecinas++;
                            indice = ij;
                            }
                         }


                         if (novecinas == 1) 
                        {

                             nuevamatrizminadyacentes[index1][index2] = matrzminadyacentes[min_comp2][min_comp3].substring(0, indice) + '_' + matrzminadyacentes[min_comp2][min_comp3].substring(indice + 1, maxbits);
                       
                             definirprimos(nuevamatrizminadyacentes[index1][index2], matrzminadyacentes[min_comp][min_comp1], matrzminadyacentes[min_comp2][min_comp3]);
                             index2++;

                        }

                    novecinas = 0;
                    min_comp3++;


                }

                min_comp3 = 0;

                min_comp1++;

            }

            min_comp++;
            min_comp2++;
            min_comp1 = 0;
           
                index1++;
            
            index2 = 0;
            min_comp3 = 0;

        }
            
primerprimoband='F';
}
        

else banderin= 'T';
		System.out.println("--- Comparando adyacencia ---");
		for( int i=0; i < nuevamatrizminadyacentes.length; i++ ) {
			boolean hayValor = false;
			for( int j=0; j < nuevamatrizminadyacentes[i].length; j++ ) {
				if( !nuevamatrizminadyacentes[i][j].equals( "-1" ) ) {
					System.out.print( nuevamatrizminadyacentes[i][j] + " ");
					hayValor = true;
				}
			}
			if( hayValor )
				System.out.println("\n------");
		}
		return nuevamatrizminadyacentes;
    }

    public static void definirprimos(String result, String op1, String op2) 
    {

        int a = 0, b = 0;
        int columna = 1;
        if (primerprimoband == 'T') {
            for (int i = 0; i < calculadorprimos.length; i++) {

                if (calculadorprimos[i][0] == op1 || calculadorprimos[i][0] == op2) 
                {
                    //si el componente de calculadorprimos es igual a opcion 1 o opcion2 
                    //y el termino anterior en esa fila no fue -1 entonces aumenta el indice
                    //de calculadorprimos del lado de las columnas para
                    //pasar al siguiente componente de la fila
                    while (calculadorprimos[i][columna] != "-1") 
                    {
                        columna++;
                    }
                    //llena a calculadorprimos ahora con los componentes de la fila 
                    //de arrays con lo dado en result 
                    //y regresate ala columna 1
                    calculadorprimos[i][columna] = result;
                    columna = 1;
                }


            }
        } 
        else {


            for (int m = 0; m < calculadorprimos.length; m++) {
                for (int n = 0; n < calculadorprimos[m].length; n++) {
                    if (calculadorprimos[m][n] == op1 || calculadorprimos[m][n] == op2) {

                        calculadorprimos[m][n] = result;

                    }
                }

            }

        }
    }

    public static void quitarprimosdobles()
    {
        int indicecalculprimos = 0;
        int indactual = 1;
        int check_index = 2;
        int temp_check_index = 0;
        int row_index = 0;
        int dontcare_index = 0;
        String checking_term;
   
        while (calculadorprimos[indicecalculprimos][0] != "-1") {
            checking_term = calculadorprimos[indicecalculprimos][indactual];

            while (calculadorprimos[indicecalculprimos][indactual] != "-1") {
                check_index = indactual + 1;
                while (calculadorprimos[indicecalculprimos][check_index] != "-1") {
                    temp_check_index = check_index;



                    if (calculadorprimos[indicecalculprimos][indactual].equals(calculadorprimos[indicecalculprimos][check_index])) {


                        while (calculadorprimos[indicecalculprimos][temp_check_index] != "-1") {
                            calculadorprimos[indicecalculprimos][temp_check_index] = calculadorprimos[indicecalculprimos][temp_check_index + 1];
                            temp_check_index++;
                        }


                        calculadorprimos[indicecalculprimos][temp_check_index] = "-1";
                        check_index--;
                    }



                    check_index++;
                }
                indactual++;
            }


            indactual = 1;
            check_index = 2;
            indicecalculprimos++;
        }

        
    }

    //esta funcion descarta los terminos que se repiten y obtiene los primos "escenciales" o principales
    public static String[][] obtenerprimosescenciales() 
    {
        int fila = 0;
        int indice = 0;
        int count = 0;
        int a = 0;
        int b = 0;
       
        
        String[] temp_back = new String[100];
        temp_back = inicializararraystr(temp_back);
        int temp_back_index = 0;
        int k = 0;

        String[][] matrizprimadepaso = new String[100][100];
        matrizprimadepaso = inicializarmatriz(matrizprimadepaso);

        
        
        //primos escenciales 
        //maxbitsdontcare representa los dontcare en binario con el maximo numero 
        //de bits disponible
        while (calculadorprimos[fila][0] != "-1") 
        {
            while (maxbitsdontcare[indice] != "-1") 
            {
                if (calculadorprimos[fila][0].equals(maxbitsdontcare[indice])) 
                {
                    calculadorprimos[fila][0] = "D";
                }
                indice++;
            }
            indice = 0;
            fila++;
        }



        fila = 0;
        indice = 0;
        while (calculadorprimos[fila][0] != "-1") {
            if (calculadorprimos[fila][2].equals("-1") && calculadorprimos[fila][0] != "D" && calculadorprimos[fila][1] !="-1") {
                m_terminos[inicesubmin] = calculadorprimos[fila][1];
                inicesubmin++;

                while (calculadorprimos[a][0] != "-1") {
                    while (calculadorprimos[a][b] != "-1") {
                        if (calculadorprimos[a][b].equals(calculadorprimos[fila][1])) {
                            calculadorprimos[a][0] = "Y";
                        }

                        b++;
                    }
                    b = 0;
                    a++;
                }
                a = 0;
                b = 0;

            }
            fila++;
        }


        

        

        a = 0;
        b = 0;
        int c = 0, d = 0;
        while (calculadorprimos[a][0] != "-1") {
            if (calculadorprimos[a][0] != "D" && calculadorprimos[a][0] != "Y") {
                while (calculadorprimos[a][b] != "-1")
                {
                    matrizprimadepaso[c][d] = calculadorprimos[a][b];
                    b++;
                    d++;


                }
                c++;
            }
            a++;

            b = 0;
            d = 0;
        }

 
        
        return matrizprimadepaso;


    }

    public static String[][] obtenerprimos(String[][] temp_prime_calc) 
    {
        int x = 0, a = 0, b = 1, c = 0, d = 0, i = 0;
        int count = 0;
        String max_minterm;
        int max_index = 0;
        String[] primes = new String[100];
        primes = inicializararraystr(primes);

        int[] prime_count = new int[100];
        prime_count = inicializararrayint(prime_count);

        String[][] temp_prime_calc2 = new String[100][100];
        temp_prime_calc2 = inicializarmatriz(temp_prime_calc2);




        while (temp_prime_calc[a][0] != "-1")
        {
            while (temp_prime_calc[a][b] != "-1")
            {
                primes[i] = temp_prime_calc[a][b];
                b++;
                i++;
            }
            a++;
        }
        
       
        a = 0;
        i = 0;
        while (primes[i] != "-1") {
            while (temp_prime_calc[a][0] != "-1") {
                while (temp_prime_calc[a][b] != "-1") {
                    if (primes[i] == temp_prime_calc[a][b]) {
                        count++;
                        b = 1;
                        break;
                    }

                    b++;
                }
                b = 1;
                a++;
            }
            a = 0;
            b = 1;
            i++;
            prime_count[c] = count;
            count = 0;
            c++;
        }

        count = 0;
        c = 0;
        while (prime_count[c] != -1)
        {
            if (prime_count[c] > count) {
                count = prime_count[c];
                max_index = c;
            }
            c++;
        }
        a = 0;
        b = 1;
        max_minterm = primes[max_index];
        if(max_minterm !="-1"){
        m_terminos[inicesubmin] = max_minterm;
        inicesubmin++;
        }
        
       

        while (temp_prime_calc[a][0] != "-1") {
            while (temp_prime_calc[a][b] != "-1") {
                if (temp_prime_calc[a][b].equals(max_minterm)) {
                    temp_prime_calc[a][0] = "Y";
                }

                b++;
            }
            b = 0;
            a++;
        }

        a = 0;
        b = 0;
    
        
        while (calculadorprimos[a][0] != "-1") 
        {
            while (calculadorprimos[a][b] != "-1") 
            {
                if (calculadorprimos[a][b].equals(max_minterm)) 
                {
                    calculadorprimos[a][0] = "Y";
                }

                b++;
            }
            b = 0;
            a++;
        }
        
        a = 0;
        b = 0;
        c = 0;
        d = 0;
        while (temp_prime_calc[a][0] != "-1") {
            if (temp_prime_calc[a][0] != "Y") {
                while (temp_prime_calc[a][b] != "-1") {
                    temp_prime_calc2[c][d] = temp_prime_calc[a][b];
                    b++;
                    d++;


                }
                c++;
            }
            a++;

            b = 0;
            d = 0;
        }



        return temp_prime_calc2;



    }

    public static void obtenerfuncionbooleana(String[] implicantes)
    {

        int cuenta = 0;
 
        String[] arrayminimizado = new String[200];
        inicializararraystr(arrayminimizado);
 
        int indiceminimax = 0;
        String funcion = "";

        

        String temporall = "";

        String letrarepresent = "";
        int i = 0;

        while (implicantes[i] != "-1") 
        {
            for (int ij = maxbits - 1; ij >= 0; ij--) 
            {

                if (implicantes[i].charAt(ij) != '_') 
                {

                    if (implicantes[i].charAt(ij) == '0') 
                    {
                        switch(ij)
                        {
                            case 0:
                                 letrarepresent = "a";
                                
                                break;
                                
                            case 1:
                                  letrarepresent = "b";
                                break;
                                
                            case 2:
                                  letrarepresent = "c";
                                break;
                                
                            case 3:   
                                  letrarepresent = "d";
                                break;
                                
                            case 4:
                                  letrarepresent = "e";
                                break;
                                
                            case 5:
                                  letrarepresent = "f";
                                break;
                                
                            case 6:
                                  letrarepresent = "g";
                                break;
                                
                            case 7:
                                  letrarepresent = "h";
                                break;
                                
                            case 8:
                                  letrarepresent = "i";
                                break;
                                
                                 case 9:
                                  letrarepresent = "j";
                                break;
                                
                               
                              
                        } 
                    
                    
                    }
                    if (implicantes[i].charAt(ij) == '1') 
                    {
                        switch(ij)
                        {
                            case 0:
                                 letrarepresent = "A";
                                
                                break;
                                
                            case 1:
                                  letrarepresent = "B";
                                break;
                                
                            case 2:
                                  letrarepresent = "C";
                                break;
                                
                            case 3:   
                                  letrarepresent = "D";
                                break;
                                
                            case 4:
                                  letrarepresent = "E";
                                break;
                                
                            case 5:
                                  letrarepresent = "F";
                                break;
                                
                            case 6:
                                  letrarepresent = "G";
                                break;
                                
                            case 7:
                                  letrarepresent = "H";
                                break;
                                
                            case 8:
                                  letrarepresent = "I";
                                break;
                                
                                 case 9:
                                  letrarepresent = "J";
                                break;
                                
                               
                              
                        } 

                    }
                    temporall = letrarepresent + temporall;

                }
            }


            i++;


            for (int j = 0; j < arrayminimizado.length; j++) 
            {

                if (arrayminimizado[j].equals(temporall)) 
                {
                    cuenta++;
                }
            }

            if (cuenta == 0) 
            {
                arrayminimizado[indiceminimax] = temporall;
                indiceminimax++;
            }
            temporall = "";
            cuenta = 0;


        }
        i = 0;


        indiceminimax = 0;
        while (arrayminimizado[indiceminimax] != "-1") 
        {
            funcion = funcion + "+" + arrayminimizado[indiceminimax];
            indiceminimax++;
        }
        funcion = funcion.substring(1, funcion.length());

		System.out.println("\n--- Funcion booleana resultante ---");
        System.out.println("\n" + funcion);

    }

    
    ///metodo que llena un array de arrays con -1
    public static String[][] inicializarmatriz(String[][] matrizstr) 
    {
        for (int i = 0; i < matrizstr.length; i++) 
        {
            for (int j = 0; j < matrizstr[i].length; j++) 
            {
                matrizstr[i][j] = "-1";
            }
        }

        return matrizstr;
    }



    public static String[] inicializararraystr(String[] arraystr) 
    {
        for (int i = 0; i < arraystr.length; i++) 
        {
            arraystr[i] = "-1";
        }
        return arraystr;
    }

    public static int[] inicializararrayint(int[] arrayint) 
    {

        for (int i = 0; i < arrayint.length; i++) {
            arrayint[i] = -1;
        }

        return arrayint;
    }
    
    //metodo que convierte de int a binario y luego a string
    public static String convertirintbitstr(int entero)
    {
        int cociente=entero,respaldo;
        String result="";
        //funciona de forma recursiva haciendo varios pasos al mismo tiempo..
       while(cociente != 0)
       {
           
           respaldo=cociente%2;
           cociente=cociente/2;
           result=Integer.toString(respaldo)+result;
       }
       return result;
    }
}
